{"version":3,"sources":["firebase/firebase.js","components/TodoApp.js","redux/todo/todoActions.js","redux/todo/todoTypes.js","redux/todo/todoReducer.js","redux/store.js","App.js","index.js"],"names":["db","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","database","TodoApp","state","text","todos","ids","handleAdd","e","preventDefault","todoText","id","ref","push","key","setState","props","addTodo","handleRemove","console","log","removeTodo","handleUpdate","prompt","updateTodo","this","className","href","type","value","onChange","target","placeholder","onClick","Component","ListItems","map","todo","connect","payload","initState","todosValue","a","once","data","Object","values","val","getInitState","todoReducer","action","set","remove","filter","update","store","createStore","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a76892dd.chunk.js","sourcesContent":["import * as firebase from 'firebase';\n\nvar firebaseConfig = {\n    apiKey: \"AIzaSyD1v7BtfjynQTbAPCTAumRV8b5ASp2sR4s\",\n    authDomain: \"react-todo-crud.firebaseapp.com\",\n    databaseURL: \"https://react-todo-crud.firebaseio.com\",\n    projectId: \"react-todo-crud\",\n    storageBucket: \"react-todo-crud.appspot.com\",\n    messagingSenderId: \"491813254587\",\n    appId: \"1:491813254587:web:cd48008f0f4c6a7ef5809e\",\n    measurementId: \"G-DZ8ZVC1Z6K\"\n};\n// Initialize Firebase\nlet firebaseApp = firebase.initializeApp(firebaseConfig);\n\nlet db = firebaseApp.database();\nexport default db;\n","import React, { Component } from 'react'\nimport { addTodo, removeTodo, updateTodo } from '../redux/todo/todoActions'\nimport { connect } from 'react-redux';\n\nimport db from '../firebase/firebase';\n\nclass TodoApp extends Component {\n\n    state = {\n        text: '',\n        todos: [],\n        ids: [],\n    }\n    handleAdd = (e) => {\n        e.preventDefault();\n        let todoText = this.state.text;\n\n        let id = db.ref(\"todos\").push().key;\n        // db.ref('todos').once('value', (data) => {\n        //     console.log(data.val()[id].text)\n        // })\n        this.setState({\n            ids: [...this.state.ids, id]\n        })\n        this.props.addTodo(todoText, id)\n        this.setState({\n            text: '',\n            id: id\n        })\n    }\n    handleRemove = (id) => {\n        console.log(\"index\", id);\n        this.props.removeTodo(id)\n\n    }\n    handleUpdate = (id) => {\n        console.log(id)\n        let todoText = prompt(\"Enter Updated Text: \");\n        this.props.updateTodo(todoText, id)\n    }\n\n    render() {\n        const { text } = this.state;\n\n\n        return (\n            <>\n                <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary py-3\">\n                    <a href=\"#\" className=\"navbar-brand font-weight-bold text-uppercase\">React Redux Todo App</a>\n                    <button className=\"navbar-toggler\">\n                        <span className=\"navbar-toggler-icon\"></span>\n                    </button>\n                </nav>\n                <header>\n                    <div className=\"container-fluid\">\n                        <div className=\"row my-5\">\n                            <div className=\"col-md-8 offset-md-2\">\n                                <div className=\"form-group input\">\n                                    <input type=\"text\" value={text} onChange={(e) => this.setState({ text: e.target.value })} className=\"form-control\" placeholder=\"Enter something...\" />\n                                    <button className=\"btn btn-primary\" onClick={(e) => this.handleAdd(e)} >Add Item</button>\n                                </div>\n                                <ul className=\"todo-list py-5\">\n                                    <ListItems\n                                        todos={this.props.todos}\n                                        handleRemove={this.handleRemove}\n                                        handleUpdate={this.handleUpdate}\n                                    />\n                                </ul>\n                            </div>\n                        </div>\n                    </div>\n                </header>\n            </>\n        )\n    }\n}\n\nconst ListItems = (props) => {\n    return (\n        props.todos.map((todo) => {\n\n            return <li key={todo.id} >\n                <span>{todo.text}</span>\n                <button className=\"btn btn-warning mx-1\" onClick={() => props.handleUpdate(todo.id)} > <i className=\"fa fa-edit\"></i> </button>\n                <button className=\"btn btn-danger mx-1\" onClick={() => props.handleRemove(todo.id)} > <i className=\"fa fa-times\"></i> </button>\n            </li>\n        })\n\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        todos: state.todos\n    }\n}\n// const mapDispatchToProps = (dispatch, state) => {\n//     console.log(state)\n//     return {\n//         addTodo: () => dispatch(addTodo())\n//     }\n// }\n\nexport default connect(mapStateToProps, { addTodo, removeTodo, updateTodo })(TodoApp);\n","import { ADD_TODO, REMOVE_TODO, UPDATE_TODO } from './todoTypes';\n\nfunction addTodo(text, id) {\n    return {\n        type: ADD_TODO,\n        payload: {\n            text,\n            id\n        }\n    }\n}\n\nfunction removeTodo(id) {\n    return {\n        type: REMOVE_TODO,\n        payload: {\n            id\n        }\n    }\n}\nfunction updateTodo(text, id) {\n    return {\n        type: UPDATE_TODO,\n        payload: {\n            text,\n            id\n        }\n    }\n}\nexport {\n    addTodo,\n    removeTodo,\n    updateTodo\n}","export const ADD_TODO =\"ADD_TODO\";\nexport const REMOVE_TODO =\"REMOVE_TODO\";\nexport const UPDATE_TODO =\"UPDATE_TODO\";","import { ADD_TODO, REMOVE_TODO, UPDATE_TODO } from './todoTypes';\n\nimport db from '../../firebase/firebase';\nconst initState = {\n    todos: [\n        // { id: id++, text: \"Learn React\" },\n        // { id: id++, text: \"Learn Redux\" },\n        // { id: id++, text: \"Learn NodeJS\" }\n    ]\n}\nlet todosValue = []\nasync function getInitState() {\n    await db.ref('todos').once('value', (data) => {\n        todosValue = Object.values(data.val());\n    })\n    console.log(todosValue)\n    initState.todos = todosValue;\n    // console.log(Object.keys(data.val()))\n    console.log(initState.todos)\n}\n\ngetInitState()\n\nconst todoReducer = (state = initState, action) => {\n\n    switch (action.type) {\n        case ADD_TODO: db.ref('todos/' + action.payload.id).set(action.payload)\n            return {\n                ...state,\n                todos: [...state.todos, action.payload],\n            }\n        case REMOVE_TODO: db.ref('todos/' + action.payload.id).remove()\n            return {\n                ...state,\n                todos: state.todos.filter((todo) => {\n                    return todo.id !== action.payload.id\n                })\n            }\n        case UPDATE_TODO: db.ref('todos/' + action.payload.id).update(action.payload)\n            return {\n                ...state,\n                todos: [action.payload, ...state.todos.filter((todo) => todo.id !== action.payload.id)]\n            }\n        default: return state;\n    }\n}\n\nexport default todoReducer;","import { createStore } from 'redux';\nimport todoReducer from './todo/todoReducer';\n\nconst store = createStore(todoReducer);\n\nexport default store;","import React from 'react';\nimport './App.css';\n\nimport TodoApp from './components/TodoApp';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nfunction App() {\n  return (\n    <Provider store={store} >\n      <TodoApp />\n    </Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}